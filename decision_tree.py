# -*- coding: utf-8 -*-
"""Decision_Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xqt7W-C9XFozutahXG7tP-r25q7hkaCp
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data = pd.read_csv('/content/fetal_health.csv')

print("Shape of the original dataset:", data.shape)

# Print the first few rows
print(data.head())

# Check number of null values in each coloumn
print(data.isnull().sum())

# Split the dataset into features and target variable
x = data.drop(columns=['fetal_health'])
y = data['fetal_health']

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Create the decision tree classifier
clf = DecisionTreeClassifier()

# Train the classifier with training data
clf.fit(x_train, y_train)

# Predict the target variable
y_pred = clf.predict(x_test)

import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

plt.figure(figsize=(20,10))
# Plot and display the decision tree
plot_tree(clf, feature_names=x.columns, class_names=['Normal', 'Suspect', 'Pathological'], filled=True, fontsize=10)
plt.show()

# Calculate the accuracy of DT classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Calculate precision, recall, and F1-score for DT
print("Decision Tree Classification Report:")
print(classification_report(y_test, y_pred, target_names=['Normal', 'Suspect', 'Pathological']))

# Confusion Matrix Display
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Normal', 'Suspect', 'Pathological'])
disp.plot(cmap=plt.cm.Blues)
plt.show()